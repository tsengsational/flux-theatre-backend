name: Deploy WordPress

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Copy required files to server
        run: |
          # Copy template and config files
          scp -o StrictHostKeyChecking=no wp-config.template.php ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }}:~
          scp -o StrictHostKeyChecking=no uploads.ini ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }}:~
          
          # Verify files were copied
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "ls -l ~/wp-config.template.php ~/uploads.ini"

      - name: Cleanup old files
        run: |
          # Stop Docker services first
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "cd ~ && docker compose down"
          
          # Backup important files
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "mkdir -p ~/wp-content-backup"
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "cp -r ~/wp-content/uploads ~/wp-content-backup/ 2>/dev/null || true"
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "cp -r ~/wp-content/db ~/wp-content-backup/ 2>/dev/null || true"
          
          # Remove old files but preserve uploads and database
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "sudo rm -rf ~/wp-content/plugins ~/wp-content/themes ~/wp-content/wp-config.php ~/wp-content/uploads.ini ~/docker-compose.yml"
          
          # Restore uploads and database from backup
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "cp -r ~/wp-content-backup/uploads ~/wp-content/ 2>/dev/null || true"
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "cp -r ~/wp-content-backup/db ~/wp-content/ 2>/dev/null || true"
          
          # Clean up backup
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "rm -rf ~/wp-content-backup"
          
          # Set proper permissions for new directories
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "sudo chown -R ${{ secrets.REMOTE_USER }}:${{ secrets.REMOTE_USER }} ~/wp-content"
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "sudo chmod -R 755 ~/wp-content"

      - name: Create deployment directories
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "mkdir -p ~/wp-content/plugins ~/wp-content/themes ~/wp-content/uploads"
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "chmod -R 755 ~/wp-content"

      - name: Generate wp-config.php
        run: |
          # Generate unique salts
          AUTH_KEY=$(openssl rand -base64 48 | tr -d '\n')
          SECURE_AUTH_KEY=$(openssl rand -base64 48 | tr -d '\n')
          LOGGED_IN_KEY=$(openssl rand -base64 48 | tr -d '\n')
          NONCE_KEY=$(openssl rand -base64 48 | tr -d '\n')
          AUTH_SALT=$(openssl rand -base64 48 | tr -d '\n')
          SECURE_AUTH_SALT=$(openssl rand -base64 48 | tr -d '\n')
          LOGGED_IN_SALT=$(openssl rand -base64 48 | tr -d '\n')
          NONCE_SALT=$(openssl rand -base64 48 | tr -d '\n')

          # Create wp-config.php from template using awk
          awk -v auth_key="$AUTH_KEY" \
              -v secure_auth_key="$SECURE_AUTH_KEY" \
              -v logged_in_key="$LOGGED_IN_KEY" \
              -v nonce_key="$NONCE_KEY" \
              -v auth_salt="$AUTH_SALT" \
              -v secure_auth_salt="$SECURE_AUTH_SALT" \
              -v logged_in_salt="$LOGGED_IN_SALT" \
              -v nonce_salt="$NONCE_SALT" \
              '{
                if ($0 ~ /define.*AUTH_KEY/) { print "define(\047AUTH_KEY\047, \047" auth_key "\047);" }
                else if ($0 ~ /define.*SECURE_AUTH_KEY/) { print "define(\047SECURE_AUTH_KEY\047, \047" secure_auth_key "\047);" }
                else if ($0 ~ /define.*LOGGED_IN_KEY/) { print "define(\047LOGGED_IN_KEY\047, \047" logged_in_key "\047);" }
                else if ($0 ~ /define.*NONCE_KEY/) { print "define(\047NONCE_KEY\047, \047" nonce_key "\047);" }
                else if ($0 ~ /define.*AUTH_SALT/) { print "define(\047AUTH_SALT\047, \047" auth_salt "\047);" }
                else if ($0 ~ /define.*SECURE_AUTH_SALT/) { print "define(\047SECURE_AUTH_SALT\047, \047" secure_auth_salt "\047);" }
                else if ($0 ~ /define.*LOGGED_IN_SALT/) { print "define(\047LOGGED_IN_SALT\047, \047" logged_in_salt "\047);" }
                else if ($0 ~ /define.*NONCE_SALT/) { print "define(\047NONCE_SALT\047, \047" nonce_salt "\047);" }
                else { print $0 }
              }' wp-config.template.php > wp-config.php

          # Verify wp-config.php was created
          if [ ! -f wp-config.php ]; then
            echo "Error: Failed to create wp-config.php"
            exit 1
          fi

      - name: Copy files
        run: |
          # Copy plugins and themes
          scp -o StrictHostKeyChecking=no -r wp-content/plugins/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }}:~/wp-content/plugins/
          scp -o StrictHostKeyChecking=no -r wp-content/themes/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }}:~/wp-content/themes/
          
          # Copy configuration files
          scp -o StrictHostKeyChecking=no wp-config.php ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }}:~/wp-content/
          scp -o StrictHostKeyChecking=no uploads.ini ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }}:~/wp-content/

      - name: Create docker-compose file
        run: |
          cat > docker-compose.yml << 'EOL'
          version: '3'

          services:
            wordpress:
              image: wordpress:latest
              ports:
                - "8000:80"
              environment:
                WORDPRESS_DB_HOST: db
                WORDPRESS_DB_USER: wordpress
                WORDPRESS_DB_PASSWORD: wordpress
                WORDPRESS_DB_NAME: wordpress
              volumes:
                - ~/wp-content/plugins:/var/www/html/wp-content/plugins
                - ~/wp-content/themes:/var/www/html/wp-content/themes
                - ~/wp-content/uploads:/var/www/html/wp-content/uploads
                - ~/wp-content/wp-config.php:/var/www/html/wp-config.php
                - ~/wp-content/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
              depends_on:
                - db
              restart: always

            db:
              image: mysql:5.7
              environment:
                MYSQL_DATABASE: wordpress
                MYSQL_USER: wordpress
                MYSQL_PASSWORD: wordpress
                MYSQL_ROOT_PASSWORD: somewordpress
              volumes:
                - ~/wp-content/db:/var/lib/mysql
              restart: always
          EOL

      - name: Copy docker-compose file
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }}:~/

      - name: Set permissions
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "chmod -R 755 ~/wp-content"

      - name: Start Docker services
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} "cd ~ && docker compose down && docker compose up -d" 